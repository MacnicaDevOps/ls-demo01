version: 2.1

executors:
  builder:
    machine: true
  deployer:
    docker:
      - image: minepicco/cc-build-image:latest
  working_directory: /tmp

workflows:
  
  build-deploy:
    jobs:
      - build_scan:
          context: webpage_deployment
      - push:
          context: webpage_deployment
          requires:
            - build_scan
      - hold:
          type: approval
          requires:
            - build_scan
      - deploy:
          requires:
            - hold
          context: webpage_deployment

jobs:
  build_scan:
    executor: builder
    
    environment:
      imagename: "macnicadevops"
      
    steps:
      - checkout
                     
      - run:
          name: Build Image
          command: |
            docker login -u $docker_user -p $docker_pass
            docker build --tag "buildimage:temp" .

      - run:
          name: "simple test"
          command: |
            docker run --rm --name web -p 80:80 -d "buildimage:temp"
            sleep 1 && curl http://localhost
            docker stop web

      - run:
          name: "Twistlock Vuln/Compliance check"
          command: |
            curl -k -u "${pc_user}:${pc_pass}" --output twistcli "${pc_url}/api/v1/util/twistcli" 
            chmod a+x twistcli
            sudo ./twistcli images scan --address "${pc_url}" -u "${pc_user}" -p "${pc_pass}" "buildimage:temp" --details

#      - run:
#          name: "Triage vulnerabilities"
#          command: |
#            ./getPrismaData.sh
#            ./triage.sh
      - run:
          name: save image to workspace
          command: |
            mkdir -p workspace
            docker save "buildimage:temp" > "workspace/image.tar"

      - persist_to_workspace:
          root: workspace
          paths:
            - image.tar
  push:
    executor: deployer
    environment:
      imagename: "macnicadevops"
      
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: load image
          command: |
            docker load -i "/tmp/workspace/image.tar"

      - run:
          name: configure aws
          command: |
            aws configure set aws_access_key_id "${awackey}"
            aws configure set aws_secret_access_key "${awsekey}"
            aws configure set region "${awregion}"
            aws configure set output "json"
            
      - run:
          name: Publish Image
          command: |
            aws ecr get-login-password --region ${awregion} | docker login --username AWS --password-stdin ${awsEndpoint}
            repo=$(echo ${awsEndpoint} | cut -d / -f 3)
            docker tag "buildimage:temp" "${repo}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}"
            docker push "${repo}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}"
            echo "image=${repo}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}" > /tmp/workspace/env.txt

  deploy:
    executor: deployer
    environment:
      comp: "low"
      imagename: "macnicadevops"
      
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Configure gcloud cli
          command: |
            echo $key>key.json
            gcloud auth activate-service-account --key-file=key.json
            gcloud beta container clusters get-credentials $cluster --region $region --project $project

      - run:
          name: configure aws
          command: |
            aws configure set aws_access_key_id "${awackey}"
            aws configure set aws_secret_access_key "${awsekey}"
            aws configure set region "${awregion}"
            aws configure set output "json"

      - run:
          name: Create Kubernetes Manifest
          command: |
            build_num=$((${CIRCLE_BUILD_NUM} - 2))
            repo=$(echo ${awsEndpoint} | cut -d / -f 3)
            deploy_image="${repo}/${CIRCLE_PROJECT_REPONAME,,}:${build_num}"
            ns="${CIRCLE_PROJECT_REPONAME,,}"
            cat manifest_template.yaml | sed -e "s@-Image_Name-@${deploy_image}@g" | sed -e "s@-Namespace-@${ns}@g" > web.yaml

      - run:
          name: Login to aws
          command: |
            aws ecr get-login-password --region ${awregion} | docker login --username AWS --password-stdin ${awsEndpoint}

      - run:
          name: Triage ECR vulnerability scan result with LeanSeeks
          command: |
            ./getECRData.sh
            ./triage.sh

      - run:
          name: deployment
          command: |
            kubectl apply -f web.yaml
            kubectl get pods -n "${CIRCLE_PROJECT_REPONAME,,}"
